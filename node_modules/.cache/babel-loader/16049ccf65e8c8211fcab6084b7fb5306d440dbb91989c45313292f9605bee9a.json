{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSlotProps } from \"../utils/index.js\";\nimport { unstable_composeClasses as composeClasses } from \"../composeClasses/index.js\";\nimport { getTabPanelUtilityClass } from \"./tabPanelClasses.js\";\nimport { useTabPanel } from \"../useTabPanel/useTabPanel.js\";\nimport { useClassNamesOverride } from \"../utils/ClassNameConfigurator.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    hidden\n  } = ownerState;\n  const slots = {\n    root: ['root', hidden && 'hidden']\n  };\n  return composeClasses(slots, useClassNamesOverride(getTabPanelUtilityClass));\n};\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\r\n *\r\n * API:\r\n *\r\n * - [TabPanel API](https://mui.com/base-ui/react-tabs/components-api/#tab-panel)\r\n */\nconst TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(props, forwardedRef) {\n  const {\n    children,\n    value,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const {\n    hidden,\n    getRootProps\n  } = useTabPanel(props);\n  const ownerState = {\n    ...props,\n    hidden\n  };\n  const classes = useUtilityClasses(ownerState);\n  const TabPanelRoot = slots.root ?? 'div';\n  const tabPanelRootProps = useSlotProps({\n    elementType: TabPanelRoot,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    additionalProps: {\n      role: 'tabpanel',\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  return /*#__PURE__*/_jsx(TabPanelRoot, {\n    ...tabPanelRootProps,\n    children: !hidden && children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TabPanel.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The props used for each slot inside the TabPanel.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside the TabPanel.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  }),\n  /**\r\n   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.\r\n   * If not provided, it will fall back to the index of the panel.\r\n   * It is recommended to explicitly provide it, as it's required for the tab panel to be rendered on the server.\r\n   */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport { TabPanel };","map":{"version":3,"names":["React","PropTypes","useSlotProps","unstable_composeClasses","composeClasses","getTabPanelUtilityClass","useTabPanel","useClassNamesOverride","jsx","_jsx","useUtilityClasses","ownerState","hidden","slots","root","TabPanel","forwardRef","props","forwardedRef","children","value","slotProps","other","getRootProps","classes","TabPanelRoot","tabPanelRootProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","additionalProps","role","ref","className","process","env","NODE_ENV","propTypes","node","string","shape","oneOfType","func","object","number"],"sources":["C:/Users/patna/NewGit/dtcc-hackathon/node_modules/@mui/base/TabPanel/TabPanel.js"],"sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSlotProps } from \"../utils/index.js\";\r\nimport { unstable_composeClasses as composeClasses } from \"../composeClasses/index.js\";\r\nimport { getTabPanelUtilityClass } from \"./tabPanelClasses.js\";\r\nimport { useTabPanel } from \"../useTabPanel/useTabPanel.js\";\r\nimport { useClassNamesOverride } from \"../utils/ClassNameConfigurator.js\";\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst useUtilityClasses = ownerState => {\r\n  const {\r\n    hidden\r\n  } = ownerState;\r\n  const slots = {\r\n    root: ['root', hidden && 'hidden']\r\n  };\r\n  return composeClasses(slots, useClassNamesOverride(getTabPanelUtilityClass));\r\n};\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\r\n *\r\n * API:\r\n *\r\n * - [TabPanel API](https://mui.com/base-ui/react-tabs/components-api/#tab-panel)\r\n */\r\nconst TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(props, forwardedRef) {\r\n  const {\r\n    children,\r\n    value,\r\n    slotProps = {},\r\n    slots = {},\r\n    ...other\r\n  } = props;\r\n  const {\r\n    hidden,\r\n    getRootProps\r\n  } = useTabPanel(props);\r\n  const ownerState = {\r\n    ...props,\r\n    hidden\r\n  };\r\n  const classes = useUtilityClasses(ownerState);\r\n  const TabPanelRoot = slots.root ?? 'div';\r\n  const tabPanelRootProps = useSlotProps({\r\n    elementType: TabPanelRoot,\r\n    getSlotProps: getRootProps,\r\n    externalSlotProps: slotProps.root,\r\n    externalForwardedProps: other,\r\n    additionalProps: {\r\n      role: 'tabpanel',\r\n      ref: forwardedRef\r\n    },\r\n    ownerState,\r\n    className: classes.root\r\n  });\r\n  return /*#__PURE__*/_jsx(TabPanelRoot, {\r\n    ...tabPanelRootProps,\r\n    children: !hidden && children\r\n  });\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? TabPanel.propTypes /* remove-proptypes */ = {\r\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\r\n  // │ These PropTypes are generated from the TypeScript type definitions. │\r\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\r\n  // └─────────────────────────────────────────────────────────────────────┘\r\n  /**\r\n   * The content of the component.\r\n   */\r\n  children: PropTypes.node,\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n  /**\r\n   * The props used for each slot inside the TabPanel.\r\n   * @default {}\r\n   */\r\n  slotProps: PropTypes.shape({\r\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\r\n  }),\r\n  /**\r\n   * The components used for each slot inside the TabPanel.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\r\n  slots: PropTypes.shape({\r\n    root: PropTypes.elementType\r\n  }),\r\n  /**\r\n   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.\r\n   * If not provided, it will fall back to the index of the panel.\r\n   * It is recommended to explicitly provide it, as it's required for the tab panel to be rendered on the server.\r\n   */\r\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n} : void 0;\r\nexport { TabPanel };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}