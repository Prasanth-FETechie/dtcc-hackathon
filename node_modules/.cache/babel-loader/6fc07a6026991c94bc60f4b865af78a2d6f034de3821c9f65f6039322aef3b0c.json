{"ast":null,"code":"// import { Box, Typography, Card } from \"@mui/material\";\n// import Chatbot from \"../components/Chatbot\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import { useState } from \"react\";\n// import axios from \"axios\";\n\n// function Report() {\n//   const [chartOptions, setChartOptions] = useState(null);\n//   const [insights, setInsights] = useState(\"\");\n\n//   const handleChatSubmit = async (input) => {\n//     try {\n//       const response = await axios.post(\n//         \"https://si8zczq3z3.execute-api.us-west-2.amazonaws.com/dummyReport\",\n//         { query: input }\n//       );\n\n//       if (response.data?.highcharts_code) {\n//         console.log(response);\n\n//         const highchartsCode = response.data.highcharts_code.replace(\"const options = \", \"\");\n\n//         const st = highchartsCode.replaceAll(\"\\n\", \"\")\n//         const newString = st.replace(';', \"\")\n\n//         const parsedOptions = eval(`(${newString})`);\n//         setChartOptions(parsedOptions);\n//       }\n\n//       if (response.data?.insights) {\n//         setInsights(response.data.insights);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   return (\n//     <Box sx={{ height: \"85vh\", padding: 2, display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-end\" }}>\n//       {chartOptions && (\n//         <Card sx={{ p: 2, mb: 2 }}>\n//           <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n//           {insights && <Typography sx={{ mt: 2 }}>{insights}</Typography>}\n//         </Card>\n//       )}\n//       <Box sx={{ p: 3 }}>\n//         <Typography variant=\"h5\">Report</Typography>\n//         <Chatbot onChatSubmit={handleChatSubmit} />\n//       </Box>\n//     </Box>\n//   );\n// }\n\n// export default Report;\n\n// // Questions\n// Which companies have EPS of exactly 5?\n\n// import { Box, Typography, Card, Divider, Button } from \"@mui/material\";\n// import Chatbot from \"../components/Chatbot\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import { useState } from \"react\";\n// import axios from \"axios\";\n// import jsPDF from \"jspdf\";\n// import { PictureAsPdf as PdfIcon } from \"@mui/icons-material\";\n\n// function Report() {\n//   const [responses, setResponses] = useState([]);\n\n//   const handleChatSubmit = async (input) => {\n//     try {\n//       const response = await axios.post(\n//         \"https://si8zczq3z3.execute-api.us-west-2.amazonaws.com/dummyReport\",\n//         { query: input }\n//       );\n\n//       if (response.data?.highcharts_code) {\n//         console.log(response);\n//         const highchartsCode = response.data.highcharts_code.replace(\"const options = \", \"\").replaceAll(\"\\n\", \"\").replace(\";\", \"\");\n//         const parsedOptions = eval(`(${highchartsCode})`);\n\n//         const newResponse = {\n//           chartOptions: parsedOptions,\n//           insights: response.data?.insights || \"\",\n//         };\n//         setResponses((prev) => [...prev, newResponse]);\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   const handleDownloadReport = () => {\n//     const doc = new jsPDF();\n//     let yOffset = 10;\n//     responses.forEach((res, index) => {\n//       doc.text(`Report ${index + 1}`, 10, yOffset);\n//       yOffset += 10;\n//       doc.text(res.insights, 10, yOffset, { maxWidth: 180 });\n//       yOffset += 30;\n//     });\n//     doc.save(\"report.pdf\");\n//   };\n\n//   return (\n//     <Box sx={{ height: \"100vh\", padding: 2, display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-end\", overflowY: \"auto\" }}>\n//       <Box sx={{ overflowY: \"scroll\" }}>\n//         {responses.map((res, index) => (\n//             <Card key={index} sx={{ mb: 2, overflowY: \"auto\" }}>\n//                 <HighchartsReact highcharts={Highcharts} options={res.chartOptions} />\n//                     <Divider />\n//                 <Typography sx={{p: 2}}>{res.insights}</Typography>\n//             </Card>\n//         ))}\n//       </Box>\n//       <Box sx={{ marginTop: 2, display: 'flex', flexDirection: 'column' }}>\n//         {responses.length > 0 && (\n//           <Button variant=\"contained\" startIcon={<PdfIcon />} onClick={handleDownloadReport} sx={{ mt: 2, ml: 'auto', width: '250px' }}>\n//             Download Report\n//           </Button>\n//         )}\n//         <Chatbot onChatSubmit={handleChatSubmit} />\n//       </Box>\n//     </Box>\n//   );\n// }\n\n// export default Report;","map":{"version":3,"names":[],"sources":["C:/Users/vinee/OneDrive/Desktop/DTCC Hackathon/dtcc-ai-ui/dtcc-hackathon/src/views/Report.jsx"],"sourcesContent":["// import { Box, Typography, Card } from \"@mui/material\";\r\n// import Chatbot from \"../components/Chatbot\";\r\n// import Highcharts from \"highcharts\";\r\n// import HighchartsReact from \"highcharts-react-official\";\r\n// import { useState } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// function Report() {\r\n//   const [chartOptions, setChartOptions] = useState(null);\r\n//   const [insights, setInsights] = useState(\"\");\r\n\r\n//   const handleChatSubmit = async (input) => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"https://si8zczq3z3.execute-api.us-west-2.amazonaws.com/dummyReport\",\r\n//         { query: input }\r\n//       );\r\n\r\n//       if (response.data?.highcharts_code) {\r\n//         console.log(response);\r\n        \r\n//         const highchartsCode = response.data.highcharts_code.replace(\"const options = \", \"\");\r\n        \r\n//         const st = highchartsCode.replaceAll(\"\\n\", \"\")\r\n//         const newString = st.replace(';', \"\")\r\n        \r\n//         const parsedOptions = eval(`(${newString})`);\r\n//         setChartOptions(parsedOptions);\r\n//       }\r\n      \r\n//       if (response.data?.insights) {\r\n//         setInsights(response.data.insights);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching data:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Box sx={{ height: \"85vh\", padding: 2, display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-end\" }}>\r\n//       {chartOptions && (\r\n//         <Card sx={{ p: 2, mb: 2 }}>\r\n//           <HighchartsReact highcharts={Highcharts} options={chartOptions} />\r\n//           {insights && <Typography sx={{ mt: 2 }}>{insights}</Typography>}\r\n//         </Card>\r\n//       )}\r\n//       <Box sx={{ p: 3 }}>\r\n//         <Typography variant=\"h5\">Report</Typography>\r\n//         <Chatbot onChatSubmit={handleChatSubmit} />\r\n//       </Box>\r\n//     </Box>\r\n//   );\r\n// }\r\n\r\n// export default Report;\r\n\r\n// // Questions\r\n// Which companies have EPS of exactly 5?\r\n\r\n\r\n// import { Box, Typography, Card, Divider, Button } from \"@mui/material\";\r\n// import Chatbot from \"../components/Chatbot\";\r\n// import Highcharts from \"highcharts\";\r\n// import HighchartsReact from \"highcharts-react-official\";\r\n// import { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import jsPDF from \"jspdf\";\r\n// import { PictureAsPdf as PdfIcon } from \"@mui/icons-material\";\r\n\r\n// function Report() {\r\n//   const [responses, setResponses] = useState([]);\r\n\r\n//   const handleChatSubmit = async (input) => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"https://si8zczq3z3.execute-api.us-west-2.amazonaws.com/dummyReport\",\r\n//         { query: input }\r\n//       );\r\n      \r\n//       if (response.data?.highcharts_code) {\r\n//         console.log(response);\r\n//         const highchartsCode = response.data.highcharts_code.replace(\"const options = \", \"\").replaceAll(\"\\n\", \"\").replace(\";\", \"\");\r\n//         const parsedOptions = eval(`(${highchartsCode})`);\r\n        \r\n//         const newResponse = {\r\n//           chartOptions: parsedOptions,\r\n//           insights: response.data?.insights || \"\",\r\n//         };\r\n//         setResponses((prev) => [...prev, newResponse]);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching data:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDownloadReport = () => {\r\n//     const doc = new jsPDF();\r\n//     let yOffset = 10;\r\n//     responses.forEach((res, index) => {\r\n//       doc.text(`Report ${index + 1}`, 10, yOffset);\r\n//       yOffset += 10;\r\n//       doc.text(res.insights, 10, yOffset, { maxWidth: 180 });\r\n//       yOffset += 30;\r\n//     });\r\n//     doc.save(\"report.pdf\");\r\n//   };\r\n\r\n//   return (\r\n//     <Box sx={{ height: \"100vh\", padding: 2, display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-end\", overflowY: \"auto\" }}>\r\n//       <Box sx={{ overflowY: \"scroll\" }}>\r\n//         {responses.map((res, index) => (\r\n//             <Card key={index} sx={{ mb: 2, overflowY: \"auto\" }}>\r\n//                 <HighchartsReact highcharts={Highcharts} options={res.chartOptions} />\r\n//                     <Divider />\r\n//                 <Typography sx={{p: 2}}>{res.insights}</Typography>\r\n//             </Card>\r\n//         ))}\r\n//       </Box>\r\n//       <Box sx={{ marginTop: 2, display: 'flex', flexDirection: 'column' }}>\r\n//         {responses.length > 0 && (\r\n//           <Button variant=\"contained\" startIcon={<PdfIcon />} onClick={handleDownloadReport} sx={{ mt: 2, ml: 'auto', width: '250px' }}>\r\n//             Download Report\r\n//           </Button>\r\n//         )}\r\n//         <Chatbot onChatSubmit={handleChatSubmit} />\r\n//       </Box>\r\n//     </Box>\r\n//   );\r\n// }\r\n\r\n// export default Report;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}