{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getMenuItemUtilityClass } from \"./menuItemClasses.js\";\nimport { useMenuItem, useMenuItemContextStabilizer } from \"../useMenuItem/index.js\";\nimport { unstable_composeClasses as composeClasses } from \"../composeClasses/index.js\";\nimport { useSlotProps } from \"../utils/useSlotProps.js\";\nimport { useClassNamesOverride } from \"../utils/ClassNameConfigurator.js\";\nimport { ListContext } from \"../useList/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuItemUtilityClass));\n}\nconst InnerMenuItem = /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(function MenuItem(props, forwardedRef) {\n  const {\n    children,\n    disabled: disabledProp = false,\n    label,\n    id,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted\n  } = useMenuItem({\n    id,\n    disabled: disabledProp,\n    rootRef: forwardedRef,\n    label\n  });\n  const ownerState = {\n    ...props,\n    disabled,\n    focusVisible,\n    highlighted\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = slots.root ?? 'li';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(Root, {\n    ...rootProps,\n    children: children\n  });\n}));\n\n/**\r\n * An unstyled menu item to be used within a Menu.\r\n *\r\n * Demos:\r\n *\r\n * - [Menu](https://mui.com/base-ui/react-menu/)\r\n *\r\n * API:\r\n *\r\n * - [MenuItem API](https://mui.com/base-ui/react-menu/components-api/#menu-item)\r\n */\n\nconst MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(props, ref) {\n  const {\n    id: idProp\n  } = props;\n\n  // This wrapper component is used as a performance optimization.\n  // `useMenuItemContextStabilizer` ensures that the context value\n  // is stable across renders, so that the actual MenuItem re-renders\n  // only when it needs to.\n  const {\n    contextValue,\n    id\n  } = useMenuItemContextStabilizer(idProp);\n  return /*#__PURE__*/_jsx(ListContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(InnerMenuItem, {\n      ...props,\n      id: id,\n      ref: ref\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * If `true`, the menu item will be disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * If `true`, the menu item won't receive focus when the mouse moves over it.\r\n   *\r\n   * @default false\r\n   */\n  disableFocusOnHover: PropTypes.bool,\n  /**\r\n   * A text representation of the menu item's content.\r\n   * Used for keyboard text navigation matching.\r\n   */\n  label: PropTypes.string,\n  /**\r\n   * @ignore\r\n   */\n  onClick: PropTypes.func,\n  /**\r\n   * The props used for each slot inside the MenuItem.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside the MenuItem.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport { MenuItem };","map":{"version":3,"names":["React","PropTypes","getMenuItemUtilityClass","useMenuItem","useMenuItemContextStabilizer","unstable_composeClasses","composeClasses","useSlotProps","useClassNamesOverride","ListContext","jsx","_jsx","useUtilityClasses","ownerState","disabled","focusVisible","slots","root","InnerMenuItem","memo","forwardRef","MenuItem","props","forwardedRef","children","disabledProp","label","id","slotProps","other","getRootProps","highlighted","rootRef","classes","Root","rootProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","className","ref","idProp","contextValue","Provider","value","process","env","NODE_ENV","propTypes","node","string","bool","disableFocusOnHover","onClick","func","shape","oneOfType","object"],"sources":["C:/Users/patna/NewGit/dtcc-hackathon/node_modules/@mui/base/MenuItem/MenuItem.js"],"sourcesContent":["'use client';\r\n\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getMenuItemUtilityClass } from \"./menuItemClasses.js\";\r\nimport { useMenuItem, useMenuItemContextStabilizer } from \"../useMenuItem/index.js\";\r\nimport { unstable_composeClasses as composeClasses } from \"../composeClasses/index.js\";\r\nimport { useSlotProps } from \"../utils/useSlotProps.js\";\r\nimport { useClassNamesOverride } from \"../utils/ClassNameConfigurator.js\";\r\nimport { ListContext } from \"../useList/index.js\";\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nfunction useUtilityClasses(ownerState) {\r\n  const {\r\n    disabled,\r\n    focusVisible\r\n  } = ownerState;\r\n  const slots = {\r\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']\r\n  };\r\n  return composeClasses(slots, useClassNamesOverride(getMenuItemUtilityClass));\r\n}\r\nconst InnerMenuItem = /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(function MenuItem(props, forwardedRef) {\r\n  const {\r\n    children,\r\n    disabled: disabledProp = false,\r\n    label,\r\n    id,\r\n    slotProps = {},\r\n    slots = {},\r\n    ...other\r\n  } = props;\r\n  const {\r\n    getRootProps,\r\n    disabled,\r\n    focusVisible,\r\n    highlighted\r\n  } = useMenuItem({\r\n    id,\r\n    disabled: disabledProp,\r\n    rootRef: forwardedRef,\r\n    label\r\n  });\r\n  const ownerState = {\r\n    ...props,\r\n    disabled,\r\n    focusVisible,\r\n    highlighted\r\n  };\r\n  const classes = useUtilityClasses(ownerState);\r\n  const Root = slots.root ?? 'li';\r\n  const rootProps = useSlotProps({\r\n    elementType: Root,\r\n    getSlotProps: getRootProps,\r\n    externalSlotProps: slotProps.root,\r\n    externalForwardedProps: other,\r\n    className: classes.root,\r\n    ownerState\r\n  });\r\n  return /*#__PURE__*/_jsx(Root, {\r\n    ...rootProps,\r\n    children: children\r\n  });\r\n}));\r\n\r\n/**\r\n * An unstyled menu item to be used within a Menu.\r\n *\r\n * Demos:\r\n *\r\n * - [Menu](https://mui.com/base-ui/react-menu/)\r\n *\r\n * API:\r\n *\r\n * - [MenuItem API](https://mui.com/base-ui/react-menu/components-api/#menu-item)\r\n */\r\n\r\nconst MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(props, ref) {\r\n  const {\r\n    id: idProp\r\n  } = props;\r\n\r\n  // This wrapper component is used as a performance optimization.\r\n  // `useMenuItemContextStabilizer` ensures that the context value\r\n  // is stable across renders, so that the actual MenuItem re-renders\r\n  // only when it needs to.\r\n  const {\r\n    contextValue,\r\n    id\r\n  } = useMenuItemContextStabilizer(idProp);\r\n  return /*#__PURE__*/_jsx(ListContext.Provider, {\r\n    value: contextValue,\r\n    children: /*#__PURE__*/_jsx(InnerMenuItem, {\r\n      ...props,\r\n      id: id,\r\n      ref: ref\r\n    })\r\n  });\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes /* remove-proptypes */ = {\r\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\r\n  // │ These PropTypes are generated from the TypeScript type definitions. │\r\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\r\n  // └─────────────────────────────────────────────────────────────────────┘\r\n  /**\r\n   * @ignore\r\n   */\r\n  children: PropTypes.node,\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n  /**\r\n   * If `true`, the menu item will be disabled.\r\n   * @default false\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * If `true`, the menu item won't receive focus when the mouse moves over it.\r\n   *\r\n   * @default false\r\n   */\r\n  disableFocusOnHover: PropTypes.bool,\r\n  /**\r\n   * A text representation of the menu item's content.\r\n   * Used for keyboard text navigation matching.\r\n   */\r\n  label: PropTypes.string,\r\n  /**\r\n   * @ignore\r\n   */\r\n  onClick: PropTypes.func,\r\n  /**\r\n   * The props used for each slot inside the MenuItem.\r\n   * @default {}\r\n   */\r\n  slotProps: PropTypes.shape({\r\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\r\n  }),\r\n  /**\r\n   * The components used for each slot inside the MenuItem.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\r\n  slots: PropTypes.shape({\r\n    root: PropTypes.elementType\r\n  })\r\n} : void 0;\r\nexport { MenuItem };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}