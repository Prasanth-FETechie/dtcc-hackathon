{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patna\\\\NewGit\\\\dtcc-hackathon\\\\src\\\\views\\\\Analyze.jsx\",\n  _s = $RefreshSig$();\nimport { Box, Typography } from \"@mui/material\";\nimport Chatbot from \"../components/Chatbot\";\nimport { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Analyze() {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const input = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.docs;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await Axios.post(\"https://klswll0tw9.execute-api.us-west-2.amazonaws.com/dev\", input);\n        if (Array.isArray(response.data)) {\n          //   setHeaders(Object.keys(response.data.body.companies[0]))\n          //   setApiData(response.data.body.companies);\n          console.log(response.data);\n          //   setExistingData(response.data.body.companies)\n        } else {\n          console.warn(\"API returned an empty array or unexpected data format\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      children: \"Analyze\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Chatbot, {\n      from: \"analyze\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 1\n  }, this);\n}\n_s(Analyze, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n  return [useLocation];\n});\n_c = Analyze;\nexport default Analyze;\nvar _c;\n$RefreshReg$(_c, \"Analyze\");","map":{"version":3,"names":["Box","Typography","Chatbot","useLocation","useEffect","Axios","jsxDEV","_jsxDEV","Analyze","_s","_location$state","location","input","state","docs","fetchData","response","post","Array","isArray","data","console","log","warn","error","sx","p","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","from","_c","$RefreshReg$"],"sources":["C:/Users/patna/NewGit/dtcc-hackathon/src/views/Analyze.jsx"],"sourcesContent":["import { Box, Typography } from \"@mui/material\";\r\nimport Chatbot from \"../components/Chatbot\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport  Axios  from \"axios\";\r\n\r\nfunction Analyze() {\r\n    const location = useLocation();\r\n    const input = location.state?.docs\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n          try {\r\n            const response = await Axios.post(\"https://klswll0tw9.execute-api.us-west-2.amazonaws.com/dev\", input);\r\n            if (Array.isArray(response.data)) {\r\n              //   setHeaders(Object.keys(response.data.body.companies[0]))\r\n              //   setApiData(response.data.body.companies);\r\n              console.log(response.data)\r\n            //   setExistingData(response.data.body.companies)\r\n            } else {\r\n              console.warn(\"API returned an empty array or unexpected data format\");\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error fetching data:\", error);\r\n          }\r\n        };\r\n        fetchData();\r\n      }, []);\r\n return (\r\n<Box sx={{ p: 3 }}>\r\n<Typography variant=\"h5\">Analyze</Typography>\r\n<Chatbot from=\"analyze\" />\r\n</Box>\r\n );\r\n}\r\nexport default Analyze;"],"mappings":";;AAAA,SAASA,GAAG,EAAEC,UAAU,QAAQ,eAAe;AAC/C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAQC,KAAK,MAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,eAAA;EACf,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,KAAK,IAAAF,eAAA,GAAGC,QAAQ,CAACE,KAAK,cAAAH,eAAA,uBAAdA,eAAA,CAAgBI,IAAI;EAClCV,SAAS,CAAC,MAAM;IACZ,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,4DAA4D,EAAEL,KAAK,CAAC;QACtG,IAAIM,KAAK,CAACC,OAAO,CAACH,QAAQ,CAACI,IAAI,CAAC,EAAE;UAChC;UACA;UACAC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACI,IAAI,CAAC;UAC5B;QACA,CAAC,MAAM;UACLC,OAAO,CAACE,IAAI,CAAC,uDAAuD,CAAC;QACvE;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACDT,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EACX,oBACDR,OAAA,CAACP,GAAG;IAACyB,EAAE,EAAE;MAAEC,CAAC,EAAE;IAAE,CAAE;IAAAC,QAAA,gBAClBpB,OAAA,CAACN,UAAU;MAAC2B,OAAO,EAAC,IAAI;MAAAD,QAAA,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAC7CzB,OAAA,CAACL,OAAO;MAAC+B,IAAI,EAAC;IAAS;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEN;AAACvB,EAAA,CA3BQD,OAAO;EAAA,QACKL,WAAW;AAAA;AAAA+B,EAAA,GADvB1B,OAAO;AA4BhB,eAAeA,OAAO;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}